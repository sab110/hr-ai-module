import streamlit as st
import PyPDF2
from crewai_agents import crew

# Set page config
st.set_page_config(
    page_title="Resume Analyzer and Career Assistant",
    page_icon="📄",
    layout="centered"
)

# Custom CSS for aesthetics
st.markdown("""
    <style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-size: 18px;
        border-radius: 8px;
        padding: 10px 20px;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .stSpinner {
        color: #4CAF50;
    }
    .analysis-section {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    .stAlert {
        font-size: 16px;
    }
    footer {
        font-size: 14px;
        text-align: center;
        margin-top: 30px;
        color: #888;
    }
    </style>
""", unsafe_allow_html=True)

# Streamlit UI
st.title("📄 Resume Analyzer and Career Assistant")
st.markdown("### Let us help you analyze your resume and prepare for your dream job! 🚀")

# Resume Upload
st.subheader("Step 1: Upload Your Resume")
uploaded_file = st.file_uploader("Upload your resume (PDF only)", type=["pdf"], label_visibility="collapsed")

st.subheader("Step 2: Enter Job Details")
job_title = st.text_input("🔍 Job Title", placeholder="e.g., Data Scientist")
company = st.text_input("🏢 Company Name", placeholder="e.g., Jaffer Business Systems")
candidate_location = st.text_input("📍 Candidate Location", placeholder="e.g., San Francisco, CA")

if st.button("Analyze Resume"):
    if uploaded_file and job_title and company and candidate_location:
        with st.spinner("Analyzing your resume... Please wait!"):
            try:
                # Extract text from PDF
                reader = PyPDF2.PdfReader(uploaded_file)
                resume_text = "\n".join(page.extract_text() for page in reader.pages if page.extract_text())
                if not resume_text.strip():
                    st.error("The uploaded PDF appears to be empty or unreadable. Please try another file.")
                    st.stop()

                # Prepare inputs for CrewAI
                inputs = {
                    'job_title': job_title,
                    'company': company,
                    'resume_text': resume_text,
                    'location': candidate_location
                }

                # Execute CrewAI tasks
                crew.kickoff(inputs=inputs)

                # Display results
                st.success("Analysis Complete! 🎉")

                # Market Research Insights
                st.subheader("📊 Market Research Insights")
                st.markdown(f"**Generated by**: {crew.tasks[0].output.agent}")
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.write(crew.tasks[0].output.raw)
                st.markdown('</div>', unsafe_allow_html=True)

                # Resume Evaluation
                st.subheader("📋 Resume Evaluation")
                st.markdown(f"**Generated by**: {crew.tasks[1].output.agent}")
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.write(crew.tasks[1].output.raw)
                st.markdown('</div>', unsafe_allow_html=True)

                # Interview Preparation
                st.subheader("🎯 Interview Preparation")
                st.markdown(f"**Generated by**: {crew.tasks[2].output.agent}")
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.write(crew.tasks[2].output.raw)
                st.markdown('</div>', unsafe_allow_html=True)

                # Job Recommendations
                st.subheader("💼 Job Recommendations")
                st.markdown(f"**Generated by**: {crew.tasks[3].output.agent}")
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.write(crew.tasks[3].output.raw)
                st.markdown('</div>', unsafe_allow_html=True)

            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    else:
        st.error("Please upload a resume and fill in all fields.")
else:
    st.markdown("💡 *Tip: Make sure to upload your resume and fill in the job details before analyzing.*")

# Footer for credits
st.markdown("""
    <footer>
        Powered by <strong> Team JBUS - Jaffer Business Systems</strong>
    </footer>
""", unsafe_allow_html=True)
